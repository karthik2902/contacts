{"version":3,"sources":["context/context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/addContacts.js","components/contacts/editContact.js","components/pages/about.js","components/pages/pageNotFound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","Object","objectSpread","contacts","filter","contact","id","payload","concat","toConsumableArray","map","Provider","dispatch","_this","setState","axios","get","res","this","data","react_default","a","createElement","value","props","children","Component","Consumer","Contact","showContactInfo","onIconClick","name","e","deleteContact","_callee","regenerator_default","wrap","_context","prev","next","delete","stop","nextProps","prevState","_this2","_this$props$contact","email","phone","className","style","cursor","onClick","bind","float","color","Link","to","marginRight","Contacts","Fragment","contacts_Contact","key","Header","href","TextInputGroup","_ref","label","placeholder","onChange","error","htmlFor","classnames","is-invalid","defaultProps","AddContact","errors","onSubmitForm","_this$state","newContact","preventDefault","abrupt","post","sent","history","push","defineProperty","target","_this$state2","onSubmit","layout_TextInputGroup","EditContact","updateContact","match","params","put","About","NotFound","App","context_Provider","HashRouter","layout_Header","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a532c7a.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport axios from 'axios'\n\nconst Context = React.createContext();\n\nconst reducer = (state,action) =>{\n    switch(action.type){\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts:state.contacts.filter(contact =>\n                    contact.id!== action.payload)\n                }\n        case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts:[action.payload,...state.contacts]\n            }\n        case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts:state.contacts.map(contact => (\n                    action.payload.id == contact.id?action.payload:contact\n                ))\n            }\n\n            default:\n                return state;\n    }\n\n}\nexport default class Provider extends Component{\n\n    state = {\n\n        contacts: [],\n        dispatch: action => this.setState(state => reducer(state,action))\n    }\n\n    async componentWillMount(){\n        //console.log(\"component will mount called...\")\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users')\n\n        this.setState({contacts:res.data})\n    }\n    render(){\n\n        return(\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}\nexport const Consumer  = Context.Consumer;","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport {Consumer} from '../../context/context'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nclass Contact extends Component{\n\n    state = {\n        showContactInfo:false\n    }\n\n    componentDidMount(){\n        //console.log(\"component did mount called...\")\n    }\n\n    componentWillMount(){\n        //console.log(\"component will mount called...\")\n    }\n\n    componentWillUpdate(){\n        //console.log(\"component will update called...\")\n    }\n\n    componentDidUpdate(){\n        //console.log(\"component did update called...\")\n    }\n\n    componentWillReceiveProps(nextProps,prevState){\n        //console.log(\"component will receive props called...\")\n        //console.log(nextProps)\n        //console.log(prevState)\n    }\n\n    onIconClick = (name,e) =>{\n        this.setState({\n            showContactInfo:!this.state.showContactInfo\n        })\n    }\n\n    deleteContact = async (id,dispatch) => {\n\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n\n        dispatch({\n            type: 'DELETE_CONTACT',\n            payload: id\n        });\n    }\n\n    render(){\n        //console.log(\"render called...\")\n        const { id,name, email, phone} = this.props.contact;\n        const {showContactInfo} = this.state;\n\n        return (\n        <Consumer>{\n\n            value => {\n                const {dispatch} = value;\n                return(\n                    <div className=\"card card-body mb-3\">\n                        <h4>{name} <i style={{cursor:'pointer'}} onClick={this.onIconClick.bind(this,name)} className=\"fas fa-sort-down\"></i>\n                            <i style={{cursor:'pointer',float:'right',color:'red'}} onClick={this.deleteContact.bind(this,id,dispatch)} className='fas fa-times'></i>\n                            <Link  to ={`contact/edit/${id}`}>\n                                <i className='fas fa-pen-alt' style={{cursor:'pointer',float:'right',color:'black',marginRight:'1rem'}}></i>\n                            </Link>\n                        </h4>\n\n                        {showContactInfo?(<ul className=\"list-group\">\n                            <li className=\"list-group-item\">Email:{email}</li>\n                            <li className=\"list-group-item\">phone:{phone}</li>\n                        </ul>):null}\n\n                    </div>\n                );\n            }\n        }\n        </Consumer>\n        );\n    }\n}\n\nContact.propTypes = {\n    contact:propTypes.object.isRequired\n}\nexport default Contact;\n\n","import React, { Component } from 'react';\nimport Contact from './Contact';\nimport {Consumer} from '../../context/context'\nclass Contacts extends Component{\n\n\n\n    render(){\n\n        return (\n            <Consumer>\n                {value => {\n                    const {contacts} = value;\n                    return (\n                        <React.Fragment>\n                            <h3 className=\"display-5 mb-4\">\n                                <span className=\"text-danger\">Contacts</span> List</h3>\n                            {contacts.map(contact => (\n                                <Contact key={contact.id} contact={contact}/>\n                            ))}\n                        </React.Fragment>\n                    )\n                    }\n                }\n                </Consumer>\n        )\n    }\n\n}\n\nexport default Contacts\n\n","import React from 'react';\nimport {Link} from 'react-router-dom'\nconst Header = (props) =>{\n    const {name} = props;\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary mb-5 py-0\">\n            <div className=\"container\">\n                <a href=\"/\" className=\"navbar-brand\">{name}</a>\n                <div>\n                    <ul className=\"navbar-nav mr-lg-0\">\n                        <li className=\"nav-item\">\n\n                            <Link to=\"/\" className=\"nav-link\"><i className=\"fas fa-home mr-1\"></i>\n                                Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n\n                            <Link to=\"/contact/add\" className=\"nav-link\">\n                                <i className=\"fas fa-plus mr-1\"></i>Add Contact</Link>\n                        </li>\n                        <li className=\"nav-item\">\n\n                            <Link to=\"/about/\" className=\"nav-link\">\n                                <i className=\"fas fa-question mr-2\"></i>About</Link>\n                        </li>\n                    </ul>\n                </div>\n                </div>\n        </nav>\n    );\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nconst TextInputGroup = ({\n    label,\n    name,\n    type,\n    value,\n    placeholder,\n    onChange,\n    error\n    }) =>{\n\n    return(\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input name={name} value={value}\n                   type={type}\n                   className={classnames(\"form-control form-control-lg\",{\n                      'is-invalid':error\n                   })}\n                   placeholder={placeholder}\n                   onChange={onChange}></input>\n\n        {\n            error && <div className=\"invalid-feedback\">{error}</div>\n        }\n        </div>\n    );\n}\n\nTextInputGroup.propTypes = {\n    label:PropTypes.string.isRequired,\n    name:PropTypes.string.isRequired,\n    value:PropTypes.string.isRequired,\n    placeholder:PropTypes.string.isRequired,\n    type:PropTypes.string.isRequired,\n    onChange:PropTypes.func.isRequired,\n    error:PropTypes.string\n}\n\nTextInputGroup.defaultProps = {\n    type:'text'\n}\n\nexport default TextInputGroup\n","import React,{Component} from 'react'\nimport {Consumer} from '../../context/context'\nimport uid from 'uuid';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios';\n\nclass AddContact extends Component{\n\n    state = {\n        name:'',\n        email:'',\n        phone:'',\n        errors:{}\n    }\n\n    onSubmitForm = async (dispatch,e) => {\n        e.preventDefault();\n        const {name,email,phone} = this.state;\n\n        if(name == ''){\n            this.setState({\n                errors:{name:'Name is Required'}\n            })\n            return;\n        }\n\n        if(email == ''){\n            this.setState({\n                errors:{email:'Email ID is Required'}\n            })\n            return;\n\n        }\n        if(phone == ''){\n            this.setState({\n                errors:{phone:'PhoneNumber is Required'}\n            })\n            return;\n        }\n        const newContact = {\n            name:name,\n            email:email,\n            phone:phone\n        }\n\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users/',newContact)\n\n        dispatch({type:'ADD_CONTACT',payload:res.data})\n\n\n        this.setState({\n            name:'',\n            email:'',\n            phone:'',\n            errors:{}\n        })\n        this.props.history.push('/');\n    }\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n\n    render(){\n\n        const {name,email,phone,errors} = this.state;\n\n        return(\n        <Consumer>\n            {\n                value => {\n                    const {dispatch} = value;\n                    return(\n                        <div className=\"card mb-3\">\n                            <div className=\"card-header\">\n                                Add Contact\n                            </div>\n                            <div className=\"card-body\">\n                                <form action=\"\" onSubmit={this.onSubmitForm.bind(this,dispatch)}>\n                                    <TextInputGroup\n                                    name=\"name\"\n                                    label=\"Name\"\n                                    placeholder = \"Enter Name\"\n                                    onChange = {this.onChange.bind(this)}\n                                    value = {name}\n                                    error = {errors.name}\n                                    />\n                                    <TextInputGroup\n                                        name=\"email\"\n                                        label=\"Email\"\n                                        placeholder = \"Enter Email\"\n                                        onChange = {this.onChange.bind(this)}\n                                        value = {email}\n                                        error = {errors.email}\n                                    />\n                                    <TextInputGroup\n                                        name=\"phone\"\n                                        label=\"phone\"\n                                        placeholder = \"Enter Phone\"\n                                        onChange = {this.onChange.bind(this)}\n                                        value = {phone}\n                                        error = {errors.phone}\n                                    />\n\n                                    <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-primary btn-block\"></input>\n                                </form>\n                            </div>\n                        </div>\n                    )\n                }\n            }\n            </Consumer>\n        );\n\n    }\n}\nexport default AddContact\n","import React,{Component} from 'react'\nimport {Consumer} from '../../context/context'\nimport uid from 'uuid';\nimport TextInputGroup from '../layout/TextInputGroup';\nimport axios from 'axios'\n\nclass EditContact extends Component{\n\n    state = {\n        name:'',\n        email:'',\n        phone:'',\n        errors:{}\n    }\n\n    async componentDidMount(){\n        const {id} = this.props.match.params\n\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\n\n        const contact = res.data;\n\n        this.setState({\n            name:contact.name,\n            email:contact.email,\n            phone:contact.phone\n        })\n    }\n\n    onSubmitForm = async (dispatch,e) => {\n        e.preventDefault();\n        const {name,email,phone} = this.state;\n        const {id} = this.props.match.params\n\n        if(name == ''){\n            this.setState({\n                errors:{name:'Name is Required'}\n            })\n            return;\n        }\n\n        if(email == ''){\n            this.setState({\n                errors:{email:'Email ID is Required'}\n            })\n            return;\n\n        }\n        if(phone == ''){\n            this.setState({\n                errors:{phone:'PhoneNumber is Required'}\n            })\n            return;\n        }\n\n        const updateContact = {\n            name,\n            email,\n            phone\n        }\n\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`,updateContact);\n\n        dispatch({type:'UPDATE_CONTACT',\n            payload:res.data\n        })\n\n        this.setState({\n            name:'',\n            email:'',\n            phone:'',\n            errors:{}\n        })\n        this.props.history.push('/');\n    }\n    onChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n\n    render(){\n\n        const {name,email,phone,errors} = this.state;\n\n        return(\n            <Consumer>\n                {\n                    value => {\n                        const {dispatch} = value;\n                        return(\n                            <div className=\"card mb-3\">\n                                <div className=\"card-header\">\n                                    Edit Contact\n                                </div>\n                                <div className=\"card-body\">\n                                    <form action=\"\" onSubmit={this.onSubmitForm.bind(this,dispatch)}>\n                                        <TextInputGroup\n                                            name=\"name\"\n                                            label=\"Name\"\n                                            placeholder = \"Enter Name\"\n                                            onChange = {this.onChange.bind(this)}\n                                            value = {name}\n                                            error = {errors.name}\n                                        />\n                                        <TextInputGroup\n                                            name=\"email\"\n                                            label=\"Email\"\n                                            placeholder = \"Enter Email\"\n                                            onChange = {this.onChange.bind(this)}\n                                            value = {email}\n                                            error = {errors.email}\n                                        />\n                                        <TextInputGroup\n                                            name=\"phone\"\n                                            label=\"phone\"\n                                            placeholder = \"Enter Phone\"\n                                            onChange = {this.onChange.bind(this)}\n                                            value = {phone}\n                                            error = {errors.phone}\n                                        />\n\n                                        <input type=\"submit\" value=\"Edit Contact\" className=\"btn btn-primary btn-block\"></input>\n                                    </form>\n                                </div>\n                            </div>\n                        )\n                    }\n                }\n            </Consumer>\n        );\n\n    }\n}\nexport default EditContact\n","import React from 'react'\n\nconst About = (props) =>{\n\n    return (\n        <div>\n            <h2 className=\"display-3\">{props.match.params.id}</h2>\n            <p className=\"lead\">Simple App To Manage your contacts</p>\n            <p className=\"text-secondary\">Version 1.0</p>\n        </div>\n    )\n}\n\nexport default About\n","/**\n * Created by KarthikRanjani on 05/12/18.\n */\nimport React from 'react';\n\nconst NotFound =  () =>{\n    return(\n        <div className=\"container\">\n            <h2 className=\"mt-3 display-5\">404 Oops Something went wrong</h2>\n            <p className=\"mb-3 lead\">Sorry,This page does not exist</p>\n        </div>\n    )\n}\n\nexport default NotFound","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Contacts from './components/contacts/Contacts'\nimport Header from './components/layout/Header'\nimport Provider from './context/context'\nimport AddContact from './components/contacts/addContacts'\nimport EditContact from './components/contacts/editContact'\nimport {HashRouter as Router,Route,Switch} from 'react-router-dom';\nimport About from './components/pages/about'\nimport NotFound from './components/pages/pageNotFound';\n\nclass App extends Component {\n  render() {\n    return (\n        <Provider>\n            <Router>\n          <div className=\"App\">\n              <Header name=\"Contact Manager\"/>\n              <div className=\"container\">\n\n                  <Switch>\n                      <Route exact path=\"/\" component={Contacts}></Route>\n                        <Route exact path=\"/about/:id\" component={About}></Route>\n                        <Route exact path = \"/contact/add\" component={AddContact}></Route>\n                      <Route exact path = \"/contact/edit/:id\" component={EditContact}></Route>\n                      <Route component={NotFound}></Route>\n                  </Switch>\n              </div>\n            </div>\n                </Router>\n        </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}